AWSTemplateFormatVersion: 2010-09-09
Description: Template for deploy Servian GTD Application
Resources:
#######################################      VPC for deploying workloads     ####################################################
  GTDVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Name
          Value: VPC for GTD Application
#######################################      Public Subnets     #################################################################
  PublicSubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref GTDVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Join 
        - ''
        - - !Ref 'AWS::Region'
          - a
      Tags:
        - Key: Name
          Value: PublicSubnet-A
  PublicSubnetB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref GTDVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Join 
        - ''
        - - !Ref 'AWS::Region'
          - b
      Tags:
        - Key: Name
          Value: PublicSubnet-B
#######################################      Application Subnets     ############################################################          
  ApplicationSubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref GTDVPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Join 
        - ''
        - - !Ref 'AWS::Region'
          - a
      Tags:
        - Key: Name
          Value: ApplicationSubnet-A
  ApplicationSubnetB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref GTDVPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Join 
        - ''
        - - !Ref 'AWS::Region'
          - b
      Tags:
        - Key: Name
          Value: ApplicationSubnet-B
#######################################      Database Subnets     ###############################################################
  DatabaseSubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref GTDVPC
      CidrBlock: 10.0.5.0/24
      AvailabilityZone: !Join 
        - ''
        - - !Ref 'AWS::Region'
          - a
      Tags:
        - Key: Name
          Value: DatabaseSubnet-A
  DatabaseSubnetB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref GTDVPC
      CidrBlock: 10.0.6.0/24
      AvailabilityZone: !Join 
        - ''
        - - !Ref 'AWS::Region'
          - b
      Tags:
        - Key: Name
          Value: DatabaseSubnet-B
#######################################      IGW,NATGateway and EIP    ##########################################################          
  GTDIGW:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: IGW for GTD Application
  GTDIGWAttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref GTDVPC
      InternetGatewayId: !Ref GTDIGW
  GTDNATGatewayA:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt 
        - EIPNATA
        - AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags:
        - Key: Name
          Value: GTDNATGatewayA
  EIPNATA:
    DependsOn: GTDIGWAttachGateway
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: EIPNATA
#######################################      Routetabels, Routes and Associations     ###########################################
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref GTDVPC
      Tags:
        - Key: Name
          Value: PublicRouteTable
  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: GTDIGWAttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref GTDIGW
  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref GTDVPC
      Tags:
        - Key: Name
          Value: PrivateRouteTable
  PrivateRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: GTDIGWAttachGateway
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref GTDNATGatewayA
  PublicSubnetARouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetBRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable
  ApplicationSubnetARouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref ApplicationSubnetA
      RouteTableId: !Ref PrivateRouteTable
  ApplicationSubnetBRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref ApplicationSubnetB
      RouteTableId: !Ref PrivateRouteTable
  DatabaseSubnetARouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref DatabaseSubnetA
      RouteTableId: !Ref PrivateRouteTable
  DatabaseSubnetBRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref DatabaseSubnetB
      RouteTableId: !Ref PrivateRouteTable
#######################################      NACLs, NACL Rules and Associations     #############################################
  ApplicationSubnetNACL:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref GTDVPC
      Tags:
        - Key: Name
          Value: ApplicationSubnetNACL
  ApplicationNACLInboundRule1:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref ApplicationSubnetNACL
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: -1
        To: -1
  ApplicationNACLOutboundRule1:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref ApplicationSubnetNACL
      RuleNumber: 100
      Protocol: -1
      Egress: true
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
  ApplicationSubnetNACLAssociationA:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref ApplicationSubnetA
      NetworkAclId: !Ref ApplicationSubnetNACL
  ApplicationSubnetNACLAssociationB:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref ApplicationSubnetB
      NetworkAclId: !Ref ApplicationSubnetNACL
  DatabaseSubnetNACL:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref GTDVPC
      Tags:
        - Key: Name
          Value: DatabaseSubnetNACL
  DatabaseNACLInboundRule1:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref DatabaseSubnetNACL
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: -1
        To: -1
  DatabaseNACLOutboundRule1:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref DatabaseSubnetNACL
      RuleNumber: 100
      Protocol: -1
      Egress: true
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
  DatabaseSubnetNACLAssociationA:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref DatabaseSubnetA
      NetworkAclId: !Ref DatabaseSubnetNACL
  DatabaseSubnetNACLAssociationB:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref DatabaseSubnetB
      NetworkAclId: !Ref DatabaseSubnetNACL
#######################################      Secrutiy Groups     ################################################################ 
  GDTLoadbalancerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: GDTLoadbalancerSecurityGroup
      SecurityGroupIngress:
        - FromPort: 80
          IpProtocol: tcp
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: GDTLoadbalancerSecurityGroup
      VpcId: !Ref GTDVPC
  GDTApplicationSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: GDTApplicationSecurityGroup
      SecurityGroupIngress:
        - FromPort: 3000
          IpProtocol: tcp
          ToPort: 3000
          SourceSecurityGroupId: !Ref GDTLoadbalancerSecurityGroup
      Tags:
        - Key: Name
          Value: GDTApplicationSecurityGroup
      VpcId: !Ref GTDVPC
  GDTDBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: GDTDBSecurityGroup
      SecurityGroupIngress:
        - FromPort: 5432
          IpProtocol: tcp
          ToPort: 5432
          SourceSecurityGroupId: !Ref GDTApplicationSecurityGroup
      Tags:
        - Key: Name
          Value: GDTDBSecurityGroup
      VpcId: !Ref GTDVPC
  GTDDBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: Subnet Group for Postgresql database
      DBSubnetGroupName: GTDDBSubnetGroup
      SubnetIds:
        - !Ref DatabaseSubnetA
        - !Ref DatabaseSubnetB
      Tags:
        - Key: Name
          Value: GTDDBSubnetGroup
#######################################      IAM roles for ECS Fargate tasks and task execution     ############################# 
  GTDAppTaskExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: GTDAppTaskExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
  GTDAppTaskRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: GTDAppTaskRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonRDSFullAccess'
        - 'arn:aws:iam::aws:policy/SecretsManagerReadWrite'
#######################################      DatabaseSecret     #################################################################         
  GTDDatabaseSecret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: GTDDatabaseSecret
      Description: Dynamic password for Database
      GenerateSecretString:
        SecretStringTemplate: '{"username":"gtdappuser"}'
        GenerateStringKey: password
        PasswordLength: 10
        ExcludeCharacters: '"`,-_''@/\'
      Tags:
        - Key: AppName
          Value: GTDApplication
#######################################      RDS MultiAZ PostgreSQL Database     ################################################          
  GTDApplicationDatabase:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBName: GTDDatabase
      DBSubnetGroupName: !Ref GTDDBSubnetGroup
      AllocatedStorage: 20
      StorageType: gp2
      DBInstanceClass: db.t2.micro
      DBInstanceIdentifier: GTDDatabase
      Engine: postgres
      EngineVersion: '10.17'
      Port: 5432
      MasterUsername: !Join 
        - ''
        - - '{{resolve:secretsmanager:'
          - !Ref GTDDatabaseSecret
          - ':SecretString:username}}'
      MasterUserPassword: !Join 
        - ''
        - - '{{resolve:secretsmanager:'
          - !Ref GTDDatabaseSecret
          - ':SecretString:password}}'
      MultiAZ: true
      Tags:
        - Key: Name
          Value: GTDApplicationDatabase
      VPCSecurityGroups:
        - !Ref GDTDBSecurityGroup
#######################################      ALB, ALB listener and TargetGroup     ##############################################
  GTDApplicationLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      IpAddressType: ipv4
      LoadBalancerAttributes:
        - Key: access_logs.s3.enabled
          Value: 'false'
        - Key: deletion_protection.enabled
          Value: 'false'
      Name: GTDApplicationLoadBalancer
      Scheme: internet-facing
      SecurityGroups:
        - !Ref GDTLoadbalancerSecurityGroup
      Subnets:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
      Tags:
        - Key: Name
          Value: GTDApplicationLoadBalancer
      Type: application
  GTDApplicationHTTPListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      LoadBalancerArn: !Ref GTDApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Order: 1
          Type: forward
          TargetGroupArn: !Ref GTDApplicationtTargetGroup
  GTDApplicationtTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /healthcheck/
      Port: 3000
      Protocol: HTTP
      HealthCheckPort: traffic-port
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      TargetType: ip
      Matcher:
        HttpCode: '200'
      HealthyThresholdCount: 5
      VpcId: !Ref GTDVPC
      Name: GTDApplicationtTargetGroup
      HealthCheckEnabled: true
#######################################      ECS Cluster, Task Definition,Services   ############################################
  GTDAppECSCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: GTDApplicationFargateCluster
  GTDAppLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: 7
  GTDAppTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref GTDAppTaskExecutionRole
      TaskRoleArn: !Ref GTDAppTaskRole
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      ContainerDefinitions:
        - Name: GTDApplicationContainer
          Image: 'servian/techchallengeapp:latest'
          MemoryReservation: 256
          Memory: 512
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref GTDAppLogGroup
              awslogs-stream-prefix: GTDApp
              awslogs-region: !Ref 'AWS::Region'
          PortMappings:
            - ContainerPort: 3000
              Protocol: tcp
          EntryPoint:
            - sh
            - '-c'
          Command:
            - !Join 
              - |+

              - - '> ./conf.toml'
                - !Join 
                  - ''
                  - - echo -e '
                    - '"DbUser" = "'
                    - !Join 
                      - ''
                      - - '{{resolve:secretsmanager:'
                        - !Ref GTDDatabaseSecret
                        - ':SecretString:username}}'
                    - '"\n'
                    - '"DbPassword" = "'
                    - !Join 
                      - ''
                      - - '{{resolve:secretsmanager:'
                        - !Ref GTDDatabaseSecret
                        - ':SecretString:password}}'
                    - '"\n'
                    - '"DbName" = "GTDDatabase"'
                    - \n
                    - '"DbPort" = "5432"'
                    - \n
                    - '"DbHost" = "'
                    - !GetAtt 
                      - GTDApplicationDatabase
                      - Endpoint.Address
                    - '"\n'
                    - '"ListenHost" = "0.0.0.0"'
                    - \n
                    - '"ListenPort" = "3000"'' >> ./conf.toml'
                - ./TechChallengeApp updatedb -s
                - ./TechChallengeApp serve
  GTDAppECSService:
    Type: 'AWS::ECS::Service'
    DependsOn:
      - GTDApplicationHTTPListener
    Properties:
      LaunchType: FARGATE
      Cluster: !Ref GTDAppECSCluster
      DesiredCount: 2
      TaskDefinition: !Ref GTDAppTaskDefinition
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref GDTApplicationSecurityGroup
          Subnets:
            - !Ref ApplicationSubnetA
            - !Ref ApplicationSubnetB
      LoadBalancers:
        - TargetGroupArn: !Ref GTDApplicationtTargetGroup
          ContainerPort: 3000
          ContainerName: GTDApplicationContainer
#######################################      Application Autoscaling Targets and Scaling Policies     ###########################          
  GTDAppAutoScalingTarget:
    Type: 'AWS::ApplicationAutoScaling::ScalableTarget'
    Properties:
      MinCapacity: 2
      MaxCapacity: 4
      ResourceId: !Join 
        - /
        - - service
          - !Ref GTDAppECSCluster
          - !GetAtt GTDAppECSService.Name
      ScalableDimension: 'ecs:service:DesiredCount'
      ServiceNamespace: ecs
      RoleARN: !Join 
        - ''
        - - 'arn:aws:iam::'
          - !Ref 'AWS::AccountId'
          - >-
            :role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService
  GTDAppTargetTrackingScalingPolicy:
    Type: 'AWS::ApplicationAutoScaling::ScalingPolicy'
    Properties:
      PolicyName: cpu75-target-tracking-scaling-policy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref GTDAppAutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 75
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
#######################################      Output section for ALB Endpoint     ################################################          
Outputs:
  GTDAppALBDNSEndpoint:
    Description: DNS name for GTD Application ALB
    Value: !GetAtt 
      - GTDApplicationLoadBalancer
      - DNSName
    Export:
      Name: !Sub '${AWS::StackName}-GTDAppALBDNSEndpoint'
